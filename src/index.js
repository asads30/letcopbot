process.env.NTBA_FIX_319 = 1;
const TelegramBot = require("node-telegram-bot-api");
const fs = require("fs");
const config = require("./config");
const helpers = require("./helpers");
const keyboard = require("./keyboard");
const kb = require("./keyboard-buttons");
const mysql = require("mysql");
const bot = new TelegramBot(config.TOKEN, {
   polling: true,
});

/* DB */
var db_config = {
   host: "localhost",
   user: "root",
   password: "",
   database: "letcop",
};
var connection;

function handleDisconnect() {
   connection = mysql.createConnection(db_config);
   connection.connect(function (err) {
      if (err) {
         console.log("error when connecting to db:", err);
         setTimeout(handleDisconnect, 2000);
      }
   });
   connection.on("error", function (err) {
      console.log("db error", err);
      if (err.code === "PROTOCOL_CONNECTION_LOST") {
         handleDisconnect();
      } else {
         throw err;
      }
   });
}

handleDisconnect();

/* Global */

let userDbData = {};
const admin = 386567097;
const admin2 = 680676094;

bot.onText(/\/start/, (msg) => {
   let userId = msg.from.id;
   let regName = msg.from.first_name;
   let regUsername = msg.from.username;
   const text = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${msg.from.first_name}\n\nüë• –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–µ—Ç–µ —Ä–æ–ª—å:`;
   connection.query(
      "SELECT * FROM users WHERE userid = ?",
      [helpers.getUserId(msg)],
      (error, results) => {
         if (error) {
            console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
         } else {
            if (results.length === 0) {
               userDbData = results[0];
               const user = [
                  helpers.getUserId(msg),
                  regName,
                  regUsername,
                  "true",
                  null,
                  0,
               ];
               const sql =
                  "INSERT INTO users(userid, regName, username, push, sendMsg, role) VALUES(?, ?, ?, ?, ?, ?)";
               connection.query(sql, user, function (err, results) {
                  if (err) console.log(err);
                  else console.log("–Æ–∑–µ—Ä –∑–∞—Ä–µ–≥–∞–Ω");
               });
               bot.sendMessage(helpers.getChatId(msg), text, {
                  reply_markup: {
                     resize_keyboard: true,
                     inline_keyboard: [
                        [
                           {
                              text: "–ü–æ—Å—Ç–∞–≤—â–∏–∫",
                              callback_data: "var1",
                           },
                           {
                              text: "–ó–∞–∫–∞–∑—á–∏–∫",
                              callback_data: "var2",
                           },
                        ],
                     ],
                  },
               });
            } else if (results[0].role == 0) {
               bot.sendMessage(helpers.getChatId(msg), text, {
                  reply_markup: {
                     resize_keyboard: true,
                     inline_keyboard: [
                        [
                           {
                              text: "–ü–æ—Å—Ç–∞–≤—â–∏–∫",
                              callback_data: "var1",
                           },
                           {
                              text: "–ó–∞–∫–∞–∑—á–∏–∫",
                              callback_data: "var2",
                           },
                        ],
                     ],
                  },
               });
            } else if (results[0].role == 1) {
               bot.sendMessage(msg.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", {
                  reply_markup: {
                     resize_keyboard: true,
                     keyboard: keyboard.freelancer,
                  },
               });
            } else if (results[0].role == 2) {
               bot.sendMessage(msg.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", {
                  reply_markup: {
                     resize_keyboard: true,
                     keyboard: keyboard.home,
                  },
               });
            } else if (results[0].role == 99) {
               bot.sendMessage(msg.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", {
                  reply_markup: {
                     resize_keyboard: true,
                     keyboard: keyboard.home,
                  },
               });
            }
         }
      }
   );
});

bot.on("message", (msg) => {
   let userId = msg.from.id;
   const chatId = helpers.getChatId(msg);
   switch (msg.text) {
      case kb.home.add:
         bot.sendPhoto(
            chatId,
            fs.readFileSync(__dirname + "/images/img1.png"),
            {
               caption: `üìù <strong>–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞</strong>

<em>–ü—Ä–∏–º–µ—Ä:
–ò—â—É —Ç–∞—Ä–≥–µ—Ç–æ–ª–æ–≥–∞ –¥–ª—è —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µca, –æ–ø—ã—Ç –Ω–µ –≤–∞–∂–µ–Ω –Ω–æ –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Å –∫–µ–π—Å–∞–º–∏ –ø–∏—à–∏—Ç–µ –∏ –æ–ø—Ä–∞–≤–ª—è–µ—Ç–µ –º–Ω–µ –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–µ, –∑–∞ —Ä–∞–±–æ—Ç—É –æ–ø–ª–∞—á–∏–≤–∞—é 200$
–°–≤—è–∑—å: @letcop_user_simple
(–û—Å—Ç–∞–≤–ª—è–µ—Ç–µ —Å–≤–æ—é —é–∑–µ—Ä)</em>
_________________________

‚ö†Ô∏è –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–∫–∞–∑–∞—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç –∏–ª–∏ —é–∑–µ—Ä –¥–ª—è —Å–≤—è–∑–∏
            
‚úÖ –ü–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤–∞—à –∑–∞–∫–∞–∑ –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–æ—Ç–µ

‚ùå –ù–∞–º <strong>–†–ï–ó–Æ–ú–ï</strong> –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, —ç—Ç–æ —á–∞—Å—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑—á–∏–∫–æ–≤ —É—Å–ª—É–≥.`,
               parse_mode: "HTML",
            }
         );
         connection.query(
            "SELECT * FROM users WHERE userid = ?",
            [helpers.getUserId(msg)],
            (error, results) => {
               if (error) {
                  console.log(error);
               } else {
                  if (results.length === 0) {
                  } else if (results[0].sendMsg == null) {
                     const sql =
                        "UPDATE users SET sendMsg = 'text1' WHERE userid = ?";
                     connection.query(sql, userId, function (err, results) {});
                  }
               }
            }
         );
         break;
      case kb.home.support:
         bot.sendPhoto(
            chatId,
            fs.readFileSync(__dirname + "/images/img2.png"),
            {
               caption: `–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å:

@Letcop_support_bot`,
            }
         );
         break;
      case kb.home.change:
         connection.query(
            "SELECT * FROM users WHERE userid = ?",
            [userId],
            (error, results) => {
               if (error) {
                  console.log(error, "4");
               } else {
                  if (results.length === 0) {
                     userDbData = results[0];
                     console.log(userDbData, "6");
                  } else if (results[0].role == 2) {
                     const sql = "UPDATE users SET role = '1' WHERE userid = ?";
                     connection.query(sql, userId, function (err, results) {
                        if (err) console.log(err, "5");
                        else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                     });
                  }
               }
            }
         );
         bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:`, {
            reply_markup: {
               resize_keyboard: true,
               inline_keyboard: [
                  [
                     {
                        text: "–ú–µ—Ç–∞–ª–ª",
                        callback_data: "prof1",
                     },
                     {
                        text: "–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
                        callback_data: "prof2",
                     },
                  ],
                  [
                     {
                        text: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —É–¥–æ–±—Ä–µ–Ω–∏—è",
                        callback_data: "prof3",
                     },
                     {
                        text: "–¶–µ–º–µ–Ω—Ç",
                        callback_data: "prof4",
                     },
                  ],
                  [
                     {
                        text: "–ì—Ä–∞–Ω—É–ª—ã",
                        callback_data: "prof5",
                     },
                     {
                        text: "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª",
                        callback_data: "prof6",
                     },
                  ],
                  [
                     {
                        text: "–û—Å—Ç–∞–ª—å–Ω—ã–µ/–î—Ä—É–≥–∏–µ",
                        callback_data: "prof7",
                     },
                  ],
               ],
            },
         });
         break;
      case kb.freelancer.change:
         bot.sendMessage(chatId, `–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:`, {
            reply_markup: {
               resize_keyboard: true,
               inline_keyboard: [
                  [
                     {
                        text: "–ú–µ—Ç–∞–ª–ª",
                        callback_data: "prof1-1",
                     },
                     {
                        text: "–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
                        callback_data: "prof2-1",
                     },
                  ],
                  [
                     {
                        text: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —É–¥–æ–±—Ä–µ–Ω–∏—è",
                        callback_data: "prof3-1",
                     },
                     {
                        text: "–¶–µ–º–µ–Ω—Ç",
                        callback_data: "prof4-1",
                     },
                  ],
                  [
                     {
                        text: "–ì—Ä–∞–Ω—É–ª—ã",
                        callback_data: "prof5-1",
                     },
                     {
                        text: "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª",
                        callback_data: "prof6-1",
                     },
                  ],
                  [
                     {
                        text: "–û—Å—Ç–∞–ª—å–Ω—ã–µ/–î—Ä—É–≥–∏–µ",
                        callback_data: "prof7-1",
                     },
                  ],
               ],
            },
         });
         break;
      case kb.freelancer.push:
         connection.query(
            "SELECT * FROM users WHERE userid = ?",
            [helpers.getUserId(msg)],
            (error, results) => {
               if (error) {
                  console.log(error);
               } else {
                  if (results.length === 0) {
                  } else if (results[0].push == "false") {
                     bot.sendMessage(msg.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", {
                        reply_markup: {
                           resize_keyboard: true,
                           inline_keyboard: [
                              [
                                 {
                                    text: "‚ùå –í–∫–ª",
                                    callback_data: "push1",
                                 },
                                 {
                                    text: "‚úÖ –û—Ç–∫–ª",
                                    callback_data: "push2",
                                 },
                              ],
                           ],
                        },
                     });
                  } else if (results[0].push == "true") {
                     bot.sendMessage(msg.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", {
                        reply_markup: {
                           resize_keyboard: true,
                           inline_keyboard: [
                              [
                                 {
                                    text: "‚úÖ –í–∫–ª",
                                    callback_data: "push1",
                                 },
                                 {
                                    text: "‚ùå –û—Ç–∫–ª",
                                    callback_data: "push2",
                                 },
                              ],
                           ],
                        },
                     });
                  } else if (results[0].role == 2) {
                     bot.sendMessage(msg.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", {
                        reply_markup: {
                           resize_keyboard: true,
                           keyboard: keyboard.home,
                        },
                     });
                  }
               }
            }
         );
         break;
   }
});

bot.on("message", (msg) => {
   let userId = msg.from.id;
   connection.query(
      "SELECT * FROM users WHERE userid = ?",
      [helpers.getUserId(msg)],
      (error, results) => {
         if (error) {
            console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
         } else {
            if (results.length === 0) {
            } else if (results[0].sendMsg == "text1") {
               if (msg.text == "üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è") {
                  console.log("–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: üîî –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è");
               } else if (msg.text == "üì© –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑") {
                  console.log("–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: üì© –†–∞–∑–º–µ—Å—Ç–∏—Ç—å –∑–∞–∫–∞–∑");
               } else if (msg.text == "üîÑ –°–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é") {
                  console.log("–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: üë§ üîÑ –°–º–µ–Ω–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é");
               } else if (msg.text == "üôã‚Äç‚ôÇÔ∏è –Ø –ü–æ—Å—Ç–∞–≤—â–∏–∫") {
                  console.log("–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: üôã‚Äç‚ôÇÔ∏è –Ø –ü–æ—Å—Ç–∞–≤—â–∏–∫");
               } else if (msg.text == "üë§ –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏") {
                  console.log("–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: üë§ –°–ª—É–∂–±–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏");
               } else {
                  bot.sendMessage(admin, `–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: ${msg.text}`);
                  bot.sendMessage(admin2, `–ó–∞—è–≤–∫–∞ –Ω–∞ –∑–∞–∫–∞–∑: ${msg.text}`);
                  bot.sendMessage(userId, `‚òëÔ∏è –í–∞—à –∑–∞–∫–∞–∑ –æ–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é`);
                  const sql =
                     "UPDATE users SET sendMsg = null WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err);
                     else {
                     }
                  });
               }
            } else if (results[0].sendMsg == "send1") {
               connection.query(
                  "SELECT * FROM users WHERE role = 1 AND prof = 1 AND push = 'true'",
                  function (err, result, fields) {
                     if (err) throw err;
                     for (var key in result) {
                        bot.sendMessage(result[key].userid, msg.text);
                     }
                  }
               );
               const sql = "UPDATE users SET sendMsg = null WHERE userid = ?";
               connection.query(sql, userId, function (err, results) {
                  if (err) console.log(err);
               });
            } else if (results[0].sendMsg == "send2") {
               connection.query(
                  "SELECT * FROM users WHERE role = 1 AND prof = 2 AND push = 'true'",
                  function (err, result, fields) {
                     if (err) throw err;
                     for (var key in result) {
                        bot.sendMessage(result[key].userid, msg.text);
                     }
                  }
               );
               const sql = "UPDATE users SET sendMsg = null WHERE userid = ?";
               connection.query(sql, userId, function (err, results) {
                  if (err) console.log(err);
               });
            } else if (results[0].sendMsg == "send3") {
               connection.query(
                  "SELECT * FROM users WHERE role = 1 AND prof = 3 AND push = 'true'",
                  function (err, result, fields) {
                     if (err) throw err;
                     for (var key in result) {
                        bot.sendMessage(result[key].userid, msg.text);
                     }
                  }
               );
               const sql = "UPDATE users SET sendMsg = null WHERE userid = ?";
               connection.query(sql, userId, function (err, results) {
                  if (err) console.log(err);
               });
            } else if (results[0].sendMsg == "send4") {
               connection.query(
                  "SELECT * FROM users WHERE role = 1 AND prof = 4 AND push = 'true'",
                  function (err, result, fields) {
                     if (err) throw err;
                     for (var key in result) {
                        bot.sendMessage(result[key].userid, msg.text);
                     }
                  }
               );
               const sql = "UPDATE users SET sendMsg = null WHERE userid = ?";
               connection.query(sql, userId, function (err, results) {
                  if (err) console.log(err);
               });
            } else if (results[0].sendMsg == "send5") {
               connection.query(
                  "SELECT * FROM users WHERE role = 1 AND prof = 5 AND push = 'true'",
                  function (err, result, fields) {
                     if (err) throw err;
                     for (var key in result) {
                        bot.sendMessage(result[key].userid, msg.text);
                     }
                  }
               );
               const sql = "UPDATE users SET sendMsg = null WHERE userid = ?";
               connection.query(sql, userId, function (err, results) {
                  if (err) console.log(err);
               });
            } else if (results[0].sendMsg == "send6") {
               connection.query(
                  "SELECT * FROM users WHERE role = 1 AND prof = 6 AND push = 'true'",
                  function (err, result, fields) {
                     if (err) throw err;
                     for (var key in result) {
                        bot.sendMessage(result[key].userid, msg.text);
                     }
                  }
               );
               const sql = "UPDATE users SET sendMsg = null WHERE userid = ?";
               connection.query(sql, userId, function (err, results) {
                  if (err) console.log(err);
               });
            } else if (results[0].sendMsg == "send7") {
               connection.query(
                  "SELECT * FROM users WHERE role = 1 AND prof = 7 AND push = 'true'",
                  function (err, result, fields) {
                     if (err) throw err;
                     for (var key in result) {
                        bot.sendMessage(result[key].userid, msg.text);
                     }
                  }
               );
               const sql = "UPDATE users SET sendMsg = null WHERE userid = ?";
               connection.query(sql, userId, function (err, results) {
                  if (err) console.log(err);
               });
            } else if (results[0].sendMsg == "news1") {
               connection.query(
                  "SELECT * FROM users WHERE role = 1 AND push = 'true'",
                  function (err, result, fields) {
                     if (err) throw err;
                     for (var key in result) {
                        bot.sendMessage(result[key].userid, msg.text, {
                           parse_mode: "HTML",
                        });
                     }
                  }
               );
               const sql = "UPDATE users SET sendMsg = null WHERE userid = ?";
               connection.query(sql, userId, function (err, results) {
                  if (err) console.log(err);
               });
            } else if (results[0].sendMsg == "news2") {
               connection.query(
                  "SELECT * FROM users WHERE role = 2 AND push = 'true'",
                  function (err, result, fields) {
                     if (err) throw err;
                     for (var key in result) {
                        bot.sendMessage(result[key].userid, msg.text);
                     }
                  }
               );
               const sql = "UPDATE users SET sendMsg = null WHERE userid = ?";
               connection.query(sql, userId, function (err, results) {
                  if (err) console.log(err);
               });
            } else if (results[0].sendMsg == "news3") {
               connection.query(
                  "SELECT * FROM users WHERE push = 'true'",
                  function (err, result, fields) {
                     if (err) throw err;
                     for (var key in result) {
                        bot.sendMessage(result[key].userid, msg.text);
                     }
                  }
               );
               const sql = "UPDATE users SET sendMsg = null WHERE userid = ?";
               connection.query(sql, userId, function (err, results) {
                  if (err) console.log(err);
               });
            } else if (results[0].sendMsg == "news4") {
               connection.query(
                  "SELECT * FROM users WHERE role = 99",
                  function (err, result, fields) {
                     if (err) throw err;
                     for (var key in result) {
                        bot.sendPhoto(
                           admin,
                           `https://api.telegram.org/file/bot${
                              config.TOKEN
                           }/${fs.readFileSync(msg.photo[0].file_id)}`,
                           {
                              caption: msg.text,
                              parse_mode: "HTML",
                           }
                        );
                     }
                  }
               );
               const sql = "UPDATE users SET sendMsg = null WHERE userid = ?";
               connection.query(sql, userId, function (err, results) {
                  if (err) console.log(err);
               });
            } else if (results[0].sendMsg == "selectVac") {
               connection.query(
                  "SELECT * FROM users WHERE role = 99",
                  function (err, result, fields) {
                     if (err) throw err;
                     for (var key in result) {
                        bot.sendMessage(
                           result[key].userid,
                           `–î—Ä—É–≥–æ–π –∑–∞–∫–∞–∑: ${msg.text}`
                        );
                     }
                  }
               );
               const sql = "UPDATE users SET sendMsg = null WHERE userid = ?";
               connection.query(sql, userId, function (err, results) {
                  if (err) console.log(err);
               });
               bot.sendMessage(msg.chat.id, "‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é", {
                  reply_markup: {
                     resize_keyboard: true,
                     keyboard: keyboard.freelancer,
                  },
               });
            }
         }
      }
   );
});

bot.onText(/\/send/, (msg) => {
   const text = `–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω, –ø–æ –∏–º–µ–Ω–∏ ${msg.from.first_name}\n\nüë• –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å:`;
   let userId = msg.from.id;
   connection.query(
      "SELECT * FROM users WHERE userid = ?",
      [helpers.getUserId(msg)],
      (error, results) => {
         if (error) {
            console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
         } else {
            if (results.length === 0) {
            } else if (results[0].role == 99) {
               bot.sendMessage(helpers.getChatId(msg), text, {
                  reply_markup: {
                     resize_keyboard: true,
                     inline_keyboard: [
                        [
                           {
                              text: "–ú–µ—Ç–∞–ª–ª",
                              callback_data: "sendVac1",
                           },
                           {
                              text: "–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
                              callback_data: "sendVac2",
                           },
                        ],
                        [
                           {
                              text: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —É–¥–æ–±—Ä–µ–Ω–∏—è",
                              callback_data: "sendVac3",
                           },
                           {
                              text: "–¶–µ–º–µ–Ω—Ç",
                              callback_data: "sendVac4",
                           },
                        ],
                        [
                           {
                              text: "–ì—Ä–∞–Ω—É–ª—ã",
                              callback_data: "sendVac5",
                           },
                           {
                              text: "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª",
                              callback_data: "sendVac6",
                           },
                        ],
                        [
                           {
                              text: "–û—Å—Ç–∞–ª—å–Ω—ã–µ/–î—Ä—É–≥–∏–µ",
                              callback_data: "sendVac7",
                           },
                        ],
                     ],
                  },
               });
            } else {
               console.log("–ù–µ —Ä–∞–∑–º–µ—â—É");
            }
         }
      }
   );
});

bot.onText(/\/news/, (msg) => {
   const text = `–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω, –ø–æ –∏–º–µ–Ω–∏ ${msg.from.first_name}\n\nüë• –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å:`;
   let userId = msg.from.id;
   connection.query(
      "SELECT * FROM users WHERE userid = ?",
      [helpers.getUserId(msg)],
      (error, results) => {
         if (error) {
            console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
         } else {
            if (results.length === 0) {
            } else if (results[0].role == 99) {
               bot.sendMessage(helpers.getChatId(msg), text, {
                  reply_markup: {
                     resize_keyboard: true,
                     inline_keyboard: [
                        [
                           {
                              text: "–§—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞–º",
                              callback_data: "sendNews1",
                           },
                           {
                              text: "–ó–∞–∫–∞–∑—á–∏–∫–∞–º",
                              callback_data: "sendNews2",
                           },
                           {
                              text: "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º",
                              callback_data: "sendNews3",
                           },
                        ],
                        [
                           {
                              text: "–§—Ä–∏–ª–∞–Ω—Å–µ—Ä–∞–º —Ñ–æ—Ç–æ",
                              callback_data: "sendNews4",
                           },
                           {
                              text: "–ó–∞–∫–∞–∑—á–∏–∫–∞–º —Ñ–æ—Ç–æ",
                              callback_data: "sendNews2",
                           },
                           {
                              text: "–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ñ–æ—Ç–æ",
                              callback_data: "sendNews3",
                           },
                        ],
                     ],
                  },
               });
            } else {
               console.log("–ù–µ —Ä–∞–∑–º–µ—â—É");
            }
         }
      }
   );
});

bot.onText(/\/stats/, (msg) => {
   let userId = msg.from.id;
   connection.query(
      "SELECT * FROM users WHERE userid = ?",
      [helpers.getUserId(msg)],
      (error, results) => {
         if (error) {
            console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
         } else {
            if (results.length === 0) {
            } else if (results[0].role == 99) {
               connection.query("SELECT * FROM users", (error, results2) => {
                  if (error) {
                     console.log(error);
                  } else {
                     let allUser = results2.length;
                     bot.sendMessage(
                        helpers.getChatId(msg),
                        `–ö–æ–ª-–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${allUser}`
                     );
                  }
                  connection.query(
                     "SELECT * FROM users WHERE role = 2",
                     (error, results3) => {
                        if (error) {
                           console.log(error);
                        } else {
                           let allUser = results3.length;
                           bot.sendMessage(
                              helpers.getChatId(msg),
                              `–ö–æ–ª-–≤–æ –∑–∞–∫–∞–∑—á–∏–∫–æ–≤: ${allUser}`
                           );
                        }
                     }
                  );
                  connection.query(
                     "SELECT * FROM users WHERE role = 1",
                     (error, results4) => {
                        if (error) {
                           console.log(error);
                        } else {
                           let allUser = results4.length;
                           bot.sendMessage(
                              helpers.getChatId(msg),
                              `–ö–æ–ª-–≤–æ —Ñ—Ä–∏–ª–∞–Ω—Å–µ—Ä–æ–≤: ${allUser}`
                           );
                        }
                     }
                  );
               });
            } else {
               console.log("–ù–µ —Ä–∞–∑–º–µ—â—É");
            }
         }
      }
   );
});

bot.on("callback_query", (callbackQuery) => {
   const msg = callbackQuery.message;
   const userId = callbackQuery.from.id;
   const msgId = callbackQuery.data;
   if (msgId === "var1") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(msg.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", {
            reply_markup: {
               resize_keyboard: true,
               inline_keyboard: [
                  [
                     {
                        text: "–ú–µ—Ç–∞–ª–ª",
                        callback_data: "prof1",
                     },
                     {
                        text: "–ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
                        callback_data: "prof2",
                     },
                  ],
                  [
                     {
                        text: "–ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —É–¥–æ–±—Ä–µ–Ω–∏—è",
                        callback_data: "prof3",
                     },
                     {
                        text: "–¶–µ–º–µ–Ω—Ç",
                        callback_data: "prof4",
                     },
                  ],
                  [
                     {
                        text: "–ì—Ä–∞–Ω—É–ª—ã",
                        callback_data: "prof5",
                     },
                     {
                        text: "–ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª",
                        callback_data: "prof6",
                     },
                  ],
                  [
                     {
                        text: "–û—Å—Ç–∞–ª—å–Ω—ã–µ/–î—Ä—É–≥–∏–µ",
                        callback_data: "prof7",
                     },
                  ],
               ],
            },
         })
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql = "UPDATE users SET role = '1' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "var2") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(msg.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", {
            reply_markup: {
               resize_keyboard: true,
               keyboard: keyboard.home,
            },
         })
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql = "UPDATE users SET role = '2' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "prof1") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(msg.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", {
            reply_markup: {
               resize_keyboard: true,
               keyboard: keyboard.freelancer,
            },
         })
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql = "UPDATE users SET prof = '1' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "prof1-1") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(
            msg.chat.id,
            "‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞: C–∞–π—Ç–æ–ª–æ–≥",
            {
               reply_markup: {
                  resize_keyboard: true,
                  keyboard: keyboard.freelancer,
               },
            }
         )
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql = "UPDATE users SET prof = '1' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "prof2") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(msg.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", {
            reply_markup: {
               resize_keyboard: true,
               keyboard: keyboard.freelancer,
            },
         })
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql = "UPDATE users SET prof = '2' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "prof2-1") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(
            msg.chat.id,
            "‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞: –ù–µ—Ñ—Ç–µ–ø—Ä–æ–¥—É–∫—Ç—ã",
            {
               reply_markup: {
                  resize_keyboard: true,
                  keyboard: keyboard.freelancer,
               },
            }
         )
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql = "UPDATE users SET prof = '2' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "prof3") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(msg.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", {
            reply_markup: {
               resize_keyboard: true,
               keyboard: keyboard.freelancer,
            },
         })
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql = "UPDATE users SET prof = '3' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "prof3-1") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(
            msg.chat.id,
            "‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞: –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–µ —É–¥–æ–±—Ä–µ–Ω–∏—è",
            {
               reply_markup: {
                  resize_keyboard: true,
                  keyboard: keyboard.freelancer,
               },
            }
         )
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql = "UPDATE users SET prof = '3' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "prof4") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(msg.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", {
            reply_markup: {
               resize_keyboard: true,
               keyboard: keyboard.freelancer,
            },
         })
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql = "UPDATE users SET prof = '4' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "prof4-1") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(
            msg.chat.id,
            "‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞: –¶–µ–º–µ–Ω—Ç",
            {
               reply_markup: {
                  resize_keyboard: true,
                  keyboard: keyboard.freelancer,
               },
            }
         )
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql = "UPDATE users SET prof = '4' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "prof5") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(msg.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", {
            reply_markup: {
               resize_keyboard: true,
               keyboard: keyboard.freelancer,
            },
         })
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql = "UPDATE users SET prof = '5' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "prof5-1") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(
            msg.chat.id,
            "‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞: –ì—Ä–∞–Ω—É–ª—ã",
            {
               reply_markup: {
                  resize_keyboard: true,
                  keyboard: keyboard.freelancer,
               },
            }
         )
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql = "UPDATE users SET prof = '5' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "prof6") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(msg.chat.id, "–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:", {
            reply_markup: {
               resize_keyboard: true,
               keyboard: keyboard.freelancer,
            },
         })
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql = "UPDATE users SET prof = '6' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "prof6-1") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(
            msg.chat.id,
            "‚òëÔ∏è –í—ã —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–∏–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∞: –ü–∏–ª–æ–º–∞—Ç–µ—Ä–∏–∞–ª",
            {
               reply_markup: {
                  resize_keyboard: true,
                  keyboard: keyboard.freelancer,
               },
            }
         )
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql = "UPDATE users SET prof = '6' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "prof7") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(
            msg.chat.id,
            "üìù –í–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –µ–µ –¥–æ–±–∞–≤–∏–º"
         )
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql =
                     "UPDATE users SET prof = '7', sendMsg = 'selectVac' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "prof7-1") {
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(
            msg.chat.id,
            "üìù –í–ø–∏—à–∏—Ç–µ —Å–≤–æ—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –≤ —Å–∫–æ—Ä–æ–º –≤—Ä–µ–º–µ–Ω–∏ –º—ã –µ–µ –¥–æ–±–∞–≤–∏–º"
         )
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql =
                     "UPDATE users SET prof = '7', sendMsg = 'selectVac' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "push1") {
      bot.answerCallbackQuery(callbackQuery.id, `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã`);
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(msg.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", {
            reply_markup: {
               resize_keyboard: true,
               inline_keyboard: [
                  [
                     {
                        text: "‚úÖ –í–∫–ª",
                        callback_data: "push1",
                     },
                     {
                        text: "‚ùå –û—Ç–∫–ª",
                        callback_data: "push2",
                     },
                  ],
               ],
            },
         })
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql = "UPDATE users SET push = 'true' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "push2") {
      bot.answerCallbackQuery(callbackQuery.id, `–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã`);
      bot.answerCallbackQuery(callbackQuery.id).then(() =>
         bot.sendMessage(msg.chat.id, "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:", {
            reply_markup: {
               resize_keyboard: true,
               inline_keyboard: [
                  [
                     {
                        text: "‚ùå –í–∫–ª",
                        callback_data: "push1",
                     },
                     {
                        text: "‚úÖ –û—Ç–∫–ª",
                        callback_data: "push2",
                     },
                  ],
               ],
            },
         })
      );
      bot.deleteMessage(msg.chat.id, msg.message_id);
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log(error, "4");
            } else {
               if (results.length === 0) {
                  userDbData = results[0];
                  console.log(userDbData, "6");
               } else {
                  const sql =
                     "UPDATE users SET push = 'false' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã");
                  });
               }
            }
         }
      );
   } else if (msgId === "sendVac1") {
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
            } else {
               if (results[0].sendMsg == null) {
                  const sql =
                     "UPDATE users SET sendMsg = 'send1' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã 2");
                  });
               } else {
                  console.log("test2");
               }
            }
         }
      );
   } else if (msgId === "sendVac2") {
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
            } else {
               if (results[0].sendMsg == null) {
                  const sql =
                     "UPDATE users SET sendMsg = 'send2' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã 2");
                  });
               } else {
                  console.log("test2");
               }
            }
         }
      );
   } else if (msgId === "sendVac3") {
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
            } else {
               if (results[0].sendMsg == null) {
                  const sql =
                     "UPDATE users SET sendMsg = 'send3' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã 2");
                  });
               } else {
                  console.log("test2");
               }
            }
         }
      );
   } else if (msgId === "sendVac4") {
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
            } else {
               if (results[0].sendMsg == null) {
                  const sql =
                     "UPDATE users SET sendMsg = 'send4' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã 2");
                  });
               } else {
                  console.log("test2");
               }
            }
         }
      );
   } else if (msgId === "sendVac5") {
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
            } else {
               if (results[0].sendMsg == null) {
                  const sql =
                     "UPDATE users SET sendMsg = 'send5' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã 2");
                  });
               } else {
                  console.log("test2");
               }
            }
         }
      );
   } else if (msgId === "sendVac6") {
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
            } else {
               if (results[0].sendMsg == null) {
                  const sql =
                     "UPDATE users SET sendMsg = 'send6' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã 2");
                  });
               } else {
                  console.log("test2");
               }
            }
         }
      );
   } else if (msgId === "sendVac7") {
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
            } else {
               if (results[0].sendMsg == null) {
                  const sql =
                     "UPDATE users SET sendMsg = 'send7' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã 2");
                  });
               } else {
                  console.log("test2");
               }
            }
         }
      );
   } else if (msgId === "sendNews1") {
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
            } else {
               if (results[0].sendMsg == null) {
                  const sql =
                     "UPDATE users SET sendMsg = 'news1' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã 2");
                  });
               } else {
                  console.log("test2");
               }
            }
         }
      );
   } else if (msgId === "sendNews2") {
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
            } else {
               if (results[0].sendMsg == null) {
                  const sql =
                     "UPDATE users SET sendMsg = 'news2' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã 2");
                  });
               } else {
                  console.log("test2");
               }
            }
         }
      );
   } else if (msgId === "sendNews3") {
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
            } else {
               if (results[0].sendMsg == null) {
                  const sql =
                     "UPDATE users SET sendMsg = 'news3' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã 2");
                  });
               } else {
                  console.log("test2");
               }
            }
         }
      );
   } else if (msgId === "sendNews4") {
      connection.query(
         "SELECT * FROM users WHERE userid = ?",
         [userId],
         (error, results) => {
            if (error) {
               console.log("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ users", error);
            } else {
               if (results[0].sendMsg == null) {
                  const sql =
                     "UPDATE users SET sendMsg = 'news4' WHERE userid = ?";
                  connection.query(sql, userId, function (err, results) {
                     if (err) console.log(err, "5");
                     else console.log("–î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã 2");
                  });
               } else {
                  console.log("test2");
               }
            }
         }
      );
   } else {
      console.log("–ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç");
   }
});

bot.on("polling_error", (error) => console.log(error));
